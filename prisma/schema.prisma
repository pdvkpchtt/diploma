// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  user_id           Int
  email             String?
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  username       String?          @unique
  birthDate      String?
  email          String?          @unique
  emailVerified  DateTime?
  phone          String?
  phoneVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  role           String?
  about          String?          @db.Text
  country        String?          @db.Text
  city           String?          @db.Text

  educationLevelId String?
  educationLevel   EducationLevel? @relation(fields: [educationLevelId], references: [id])

  UserArea       UserArea[]
  UserSkills     UserSkills[]
  BookMarks      Bookmarks[]
  Company        Company?
  HR             Hr[]
}

model EducationLevel {
  id      String    @id @default(cuid())
  label    String
  user    User[]
}

model UserSkills {
  id      String @id @default(cuid())
  userId  String @db.Text
  skillId String @db.Text
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
}
model UserArea {
  id      String @id @default(cuid())
  label   String
  userId  String @db.Text
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Company {
  id         String           @id @default(cuid())
  userId     String           @unique
  username   String?          @unique
  name       String
  image      String?
  slogan     String?
  about      String?
  country    String?          @db.Text
  city       String?          @db.Text
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())
  Vacancy    Vacancy[]
  Cities     Cities[]
  industryId String?
  industry   CompanyIndustry? @relation(fields: [industryId], references: [id])
  HR         Hr[]
}

model CompanyIndustry {
  id      String    @id @default(cuid())
  label   String
  Company Company[]
}

model Vacancy {
  id        String  @id @default(cuid())
  name      String
  companyId String
  Company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  description      String
  shortDescription String

  waitings String

  conditions String

  salaryStart String?
  salaryEnd   String?

  Bookmarks     Bookmarks[]

  distantWork Boolean @default(false)

  formatId String?
  format   Format? @relation(fields: [formatId], references: [id])

  experienceId String?
  experience   Experience? @relation(fields: [experienceId], references: [id])

  contractId String?
  contract   Contract? @relation(fields: [contractId], references: [id])

  currencyId String?
  currency   Currency? @relation(fields: [currencyId], references: [id])

  industryId String?
  Industry   Industry? @relation(fields: [industryId], references: [id])

  hrCreatorId  String?
  hrCreator    Hr?            @relation(fields: [hrCreatorId], references: [id])
}

model Experience {
  id      String    @id @default(cuid())
  label    String
  vacancy Vacancy[]
}


model Contract {
  id      String    @id @default(cuid())
  label   String
  vacancy Vacancy[]
}

model Currency {
  id      String    @id @default(cuid())
  label   String
  vacancy Vacancy[]
}

model Industry {
  id      String    @id @default(cuid())
  label    String
  vacancy Vacancy[]
}

model Format {
  id      String    @id @default(cuid())
  label    String
  vacancy Vacancy[]
}


model Cities {
  id        String  @id @default(cuid())
  label     String
  companyId String
  Company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Hr {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  token        String
  dataVerified DateTime?
  Vacancy      Vacancy[]
}

model Bookmarks {
  id        String  @id @default(cuid())
  userId    String  @db.Text
  vacancyId String  @db.Text
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
}

model BigCity {
  id    String @id @default(cuid())
  label String
}

model Skill {
  id            String          @id @default(cuid())
  name          String          @db.Text
  type          String          @default("")
  UserSkills    UserSkills[]
  // VacancySkills VacancySkills[]
  areaId        String?
  area          Area?           @relation(fields: [areaId], references: [id])
}

model Area {
  id    String  @id @default(cuid())
  label String
  skill Skill[]
}
